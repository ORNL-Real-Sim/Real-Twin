============
Installation
============

You can install the latest stable release of the package at `PyPI`_ using `pip`_:

.. code-block:: bash

    pip install realtwin

By running the command above, the realtwin package along with required dependency packages
(`PyYAML`_, `Shapely`_, `traci`_, `Requests`_, `pyufunc`_, `mealpy`_, `matplotlib`_, `networkx`_) will be installed to your computer (if they have not been installed yet).

Potential Issues
=================

- Shapely

If you install osm2gmns in a conda environment, you may get an error message: "OSError: [WinError 126]
The specified module could not be found" when importing osm2gmns. To resolve this issue, you need to uninstall
the `Shapely`_ package first, and reinstall it manually using the command below.

.. code-block:: bash

    conda install shapely

==================
Simulator Included
==================

.. Note::
    Add some figures to show the simulator interface and simulation results.

The realtwin package is currently include the following simulators:

- ** `SUMO`_ **: Simulation of Urban MObility, a traffic simulation package.

- ** `AimSUN`_ **: Aimsun is a traffic simulation software that provides a comprehensive platform for modeling and simulating transportation systems.

- ** `VISSIM`_ **: VISSIM is a traffic simulation software that allows for the modeling and analysis of complex traffic scenarios.


==============================
Configuration File Preparation
==============================

The configuration file is a `YAML`_ file that contains all the necessary parameters for the realtwin package to run.

Sample Configuration File
=========================

.. code-block:: yaml

    # Sample configuration file for realtwin
    input_dir: C:\Users\xh8\ornl_work\github_workspace\Real-Twin-Dev\datasets\chattanooga
    output_dir:  # optional

    # Absolute and Concrete Scenario Generation
    Traffic:
        Volume: GridSmart_demand.csv
        TurningRatio: GridSmart_demand.csv
        GridSmart_lookup: GridSmart_lookuptable.csv
    Network:
        NetworkName: chatt  # the name of the network should not have space between words
        NetworkVertices: (-85.14977588011192, 35.040346288414916), (-85.15823020212477, 35.04345144844759), (-85.15829457513502, 35.043293338482925), (-85.14986171079225, 35.04018378032611)
        Net_BBox:  # optional
        ElevationMap: chatt_elev.tif  # optional
    Control:
        Signal: Synchro_signal.csv
        Synchro_lookup: Synchro_lookuptable.csv

    # Turn, inFlow and Behavior Calibration
    Calibration:
        # overall configuration for the calibration
        scenario_config:
            sim_start_time: 28800  # 8:00 AM In seconds
            sim_end_time: 32400  # 9:00 AM In seconds
            calibration_target:
                GEH: 5  # https://en.wikipedia.org/wiki/GEH_statistic
                GEHPercent: 0.85  # accepted match
            calibration_interval: 60  # mins
            demand_interval: 15  # mins

            # input files for the calibration
            path_turn: "turn.xlsx"
            path_inflow: "inflow.xlsx"
            path_summary: "summary.xlsx"
            path_updated_signal: "updated_signal.xml"
            path_Edge_add: "Edge.add.xml"
            path_EdgeData: "EdgeData.xml"   # the EdgeData.xml is generated by the simulation

        turn_inflow:
            initial_params: [0.5, 0.5, 0.5, 0.5, 0.5,
                            0.5, 0.5, 0.5, 0.5, 0.5,
                            0.5, 0.5, 100, 100, 100, 100]
            params_ranges: [[0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                            [0, 1], [0, 1], [0, 1], [0, 1], [0, 1],
                            [0, 1], [0, 1], [50, 200], [50, 200], [50, 200], [50, 200]]

            # Termination criteria
            max_epoch: 1000  # max number of iterations
            max_fe: 10000  # max number of function evaluations
            max_time: 3600  # max time in seconds
            max_early_stop: 20  # max number of early stop iterations

            ga_config:  # generic algorithm configuration
                # the original configuration for the Genetic Algorithm
                num_generations: 10
                num_variables: 16
                num_turning_ratio: 12  # remaining should be inflow
                ubc: 200  # upper bound of inflow
                population_size: 2  # population size must be even
                crossover_rate: 0.75
                mutation_rate: 0.1
                elitism_size: 1  # number of elite individuals to carry over
                best_fitness_value: 999999  # Large Num, avoid inf
                max_no_improvement: 5  # stop if no improvement in this iteration

                # new configuration for the Genetic Algorithm
                epoch: 1000  # number of generations
                pop_size: 30  # population size
                pc: 0.75  # crossover probability
                pm: 0.1  # mutation probability
                selection: "roulette"  # Options: roulette, tournament, random
                key_way: 0.2  # key way for tournament selection
                crossover: "uniform"  # Options: uniform, one_point, multi_point, arithmetic
                mutation: "swap"  # Options: swap, flip
                elite_best: 0.1  # percentage of the best in elite group, or int, the number of best elite
                elite_worst: 0.3  # percentage of the worst in elite group, or int, the number of worst elite
                model_selection: "BaseGA"  #  BaseGA, EliteSingleGA, EliteMultiGA, MultiGA, SingleGA

            sa_config:  # simulated annealing configuration
                # the original configuration for the Simulated Annealing
                num_variables: 16
                num_turning_ratio: 12  # remaining should be inflow
                initial_temperature: 100
                ubc: 200  # upper bound of inflow
                cost_difference: 2
                accept_prob: 0.5
                stopping_temperature: 0.001

                # new configuration for the Simulated Annealing
                epoch: 1000  # number of generations
                temp_init: 100  # initial temperature
                cooling_rate: 0.891  # same as previous
                scale: 0.1  # scale for the temperature
                model_selection: "OriginalSA"  # OriginalSA, GaussianSA, SwarmSA

            ts_config:  # tabu search configuration
                # the original configuration for the Tabu Search
                iterations: 3
                # tabu_size: 120
                neighborhood_size: 32
                move_range: 0.5   # initial move range
                num_turning_ratio: 12
                max_no_improvement_local: 5
                max_no_improvement_global: 30
                lower_bound: 0
                upper_bound: 1
                lbc: 0  # lower bound for inflow counts
                ubc: 200  # upper bound for inflow counts

                # new configuration for the Tabu Search
                epoch: 1000  # number of generations
                tabu_size: 10  # size of the tabu list;
                neighbour_size: 10  # size of the neighbourhood for generating candidate solutions
                perturbation_scale: 0.05  # scale of perturbation for the solution

        behavior:
            # behavior calibration shared by all algorithms
            EB_tt: 240  # mins?
            WB_tt: 180  # mins?
            EB_edge_list: ["-312", "-293", "-297", "-288", "-286",
                            "-302", "-3221", "-322", "-313", "-284",
                            "-328", "-304"]
            WB_edge_list: ["-2801", "-280", "-307", "-327", "-281",
                            "-315", "-321", "-300", "-2851", "-285",
                            "-290", "-298", "-295"]
            initial_params:
                min_gap: 2.5  # min gap between vehicles in meters
                acceleration: 2.6  #  max acceleration in m/s^2
                deceleration: 4.5  # max deceleration in m/s^2
                sigma: 0.5  # driver imperfection
                tau: 1.00  # desired headway
                emergencyDecel: 9.0  # emergency deceleration in m/s^2
            params_ranges:
                min_gap: [1.0, 3.0]
                acceleration: [2.5, 3.0]
                deceleration: [4.0, 5.3]
                sigma: [0.0, 1.0]
                tau: [0.25, 1.25]
                emergencyDecel: [5.0, 9.3]

            # Termination criteria
            max_epoch: 1000  # max number of iterations
            max_fe: 10000  # max number of function evaluations
            max_time: 3600  # max time in seconds
            max_early_stop: 20  # max number of early stop iterations

            ga_config:
                epoch: 1000  # number of generations
                pop_size: 30  # population size
                pc: 0.75  # crossover probability
                pm: 0.1  # mutation probability

                selection: "roulette"  # Options: roulette, tournament, random
                key_way: 0.2  # key way for tournament selection
                crossover: "uniform"  # Options: uniform, one_point, multi_point, arithmetic
                mutation: "swap"  # Options: swap, flip
                elite_best: 0.1  # percentage of the best in elite group, or int, the number of best elite
                elite_worst: 0.3  # percentage of the worst in elite group, or int, the number of worst elite
                model_selection: "BaseGA"  #  BaseGA, EliteSingleGA, EliteMultiGA, MultiGA, SingleGA

            sa_config:
                epoch: 1000  # number of generations
                temp_init: 100  # initial temperature
                cooling_rate: 0.891  # same as previous
                scale: 0.1  # scale for the temperature
                model_selection: "OriginalSA"  # OriginalSA, GaussianSA, SwarmSA

            ts_config:
                # the original configuration for the Tabu Search
                max_iteration: 50
                num_neighbors: 5
                tabu_list_size: 10
                decimal_places: 5

                # the new configuration for the Tabu Search
                epoch: 1000  # number of generations
                tabu_size: 10  # size of the tabu list; same as previous value
                neighbour_size: 10  # size of the neighbourhood for generating candidate solutions
                perturbation_scale: 0.05  # scale of perturbation for the solution


===================================================
Real-Twin Scenario Generation Python Implementation
===================================================

.. code-block:: python

    import realtwin as rt


    if __name__ == '__main__':

        # Prepare your configuration file (in YAML format)
        CONFIG_FILE = "./public_configs.yaml"

        # initialize the realtwin object
        twin = rt.RealTwin(input_config_file=CONFIG_FILE, verbose=True)

        # NOTE optional: crate or delete a Python virtual environment for the simulation
        # twin.venv_create(venv_name=twin._venv_name, venv_dir=twin.input_config["output_dir"])
        # twin.venv_delete(venv_name=twin._venv_name, venv_dir=twin.input_config["output_dir"])

        # check simulator env: if SUMO, VISSIM, Aimsun, etc... are installed
        # twin.env_setup(sel_sim=["SUMO", "VISSIM"])
        twin.env_setup(sel_sim=["SUMO", "VISSIM"])

        # NOTE optional: check simulator including additional selection of directories
        # change the new_dir to your own directory where the SUMO is installed (multiple versions)
        # new_dir = [r"C:\Users\xh8\ornl_workspace\github_workspace\Real-Twin\SUMO\sumo-1.20.0\bin"]
        # twin.env_setup(sel_sim=["SUMO", "VISSIM"], sel_dir=new_dir)

        # NOTE optional: strict simulator check, if the version is not matched, install the required version
        # twin.env_setup(sel_sim=["SUMO", "VISSIM"], sel_dir=new_dir, strict_sumo_version="1.21.0")

        # generate abstract scenario
        twin.generate_abstract_scenario(incl_elevation_tif=True)

        # generate scenarios
        twin.generate_concrete_scenario()

        # simulate the scenario
        twin.prepare_simulation()

        # perform calibration
        # Available algorithms: GA: Genetic Algorithm, SA: Simulated Annealing, TS: Tabu Search
        twin.calibrate(sel_algo={"turn_inflow": "GA", "behavior": "GA"})

        # post-process the simulation results
        twin.post_process()  # keywords arguments can be passed to specify the post-processing options

        # visualize the simulation results
        twin.visualize()  # keywords arguments can be passed to specify the visualization options




.. _`PyPI`: https://pypi.org/project/osm2gmns
.. _`pip`: https://packaging.python.org/key_projects/#pip
.. _`Shapely`: https://github.com/Toblerity/Shapely
.. _`traci`: https://github.com/osmcode/pyosmium
.. _`Requests`: https://github.com/numpy/numpy
.. _`pyufunc`: https://github.com/xyluo25/pyufunc
.. _`mealpy`: https://mealpy.readthedocs.io/en/latest/
.. _`matplotlib`: https://matplotlib.org/
.. _`networkx`: https://networkx.org/
.. _`PyYAML`: https://pyyaml.org/
.. _`our repository`: https://github.com/ORNL-Real-Sim/Real-Twin
.. _`osmium github homepage`: https://github.com/ORNL-Real-Sim/Real-Twin
.. _`SUMO`: https://sumo.dlr.de/docs/index.html
.. _`Aimsun`: https://www.aimsun.com/
.. _`VISSIM`: https://www.ptvgroup.com/en/solutions/ptv-vissim/
.. _YAML: https://en.wikipedia.org/wiki/YAML
